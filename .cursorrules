# Connecto-nest 프로젝트 Cursor 규칙

## 🎯 프로젝트 개요
- NestJS 11.x 기반 백엔드 API 프로젝트
- TypeORM + PostgreSQL 데이터베이스
- JWT 인증 + 소셜 로그인 (Google, Apple, Kakao, Naver)
- @foryourdev/nestjs-crud 자동 CRUD 생성
- yarn 패키지 매니저 사용

## 📋 코딩 규칙

### 언어 및 프레임워크
- TypeScript 5.7.x 사용
- NestJS 데코레이터 패턴 준수
- class-validator, class-transformer 사용한 DTO 검증

### Import 경로 규칙
- **필수**: 상대경로 사용 (`../../guards/auth.guard`)
- **금지**: 절대경로 (`src/guards/auth.guard`) - Jest 테스트 오류 원인
- 경로 예시: `import { AuthGuard } from '../../guards/auth.guard';`

### 패키지 매니저
- **MUST**: yarn 명령어만 사용 (npm 금지)
- 예: `yarn install`, `yarn dev`, `yarn migration:run`

### 파일 구조 및 네이밍
- 모듈식 구조: `src/modules/{module-name}/`
- 엔티티: `{name}.entity.ts` (모듈 루트)
- 서비스: `{name}.service.ts` (모듈 루트)
- 모듈: `{name}.module.ts` (모듈 루트)
- 컨트롤러: `api/v{version}/{name}.controller.ts` (API 버전별 관리)
- DTO: `dto/{name}.dto.ts` (dto 서브디렉토리)
- 상수: `constants/{name}.constants.ts` (constants 서브디렉토리)
- 타입: `types/{name}.types.ts` (types 서브디렉토리)
- 서비스: `services/{name}.service.ts` (복잡한 서비스는 services 서브디렉토리)
- 케밥 케이스 파일명 사용

### 데이터베이스 관련
- TypeORM 엔티티는 반드시 `src/config/database.config.ts`의 ENTITIES 배열에 등록
- 마이그레이션 생성: `yarn migration:generate -- {MigrationName}`
- 새 엔티티 생성 시 자동으로 마이그레이션 생성 제안
- BaseEntity 상속 권장

### 인증 및 보안
- JWT 기반 인증 사용
- AuthGuard, AdminGuard 적절히 적용
- 민감한 정보는 @Exclude() 데코레이터 사용 (refreshToken 등)
- 환경변수로 시크릿 관리
- SECURITY_CONSTANTS.BCRYPT_SALT_ROUNDS 사용 (기본값: 10)

### 컨트롤러 패턴:
```typescript
export class EntityController {
  constructor(public readonly crudService: EntityService) {}
  
  @BeforeCreate()
  @BeforeUpdate()
  async preprocessData(body: any) {
    // 데이터 전처리 로직
    return body;
  }
}
```

### API 설계
- @foryourdev/nestjs-crud 활용한 자동 CRUD
- crudResponse() 래퍼 함수 사용
- RESTful API 설계 원칙 준수
- API 버전 관리: `@Controller({ path: 'resource-name', version: '1' })`
- **중요**: 모든 컨트롤러는 사용자용 API만 개발 (관리자 라우트는 별도 개발 예정)

## 🚀 @foryourdev/nestjs-crud 사용 규칙

### 핵심 원칙
- **MUST**: 모든 서비스는 CrudService를 상속받아 사용
- **MUST**: 모든 컨트롤러는 @Crud 데코레이터 사용
- **지양**: 커스텀 함수 최소화, 표준 CRUD 액션(index, show, create, update, destroy) 최대 활용
- **필수**: 보안을 위해 allowedFilters, allowedParams, allowedIncludes 설정

### 서비스 패턴:
```typescript
@Injectable()
export class EntityService extends CrudService<Entity> {
  constructor(
    @InjectRepository(Entity)
    repository: Repository<Entity>,
  ) {
    super(repository);
  }
  
  // 커스텀 함수는 최대한 지양하고, 필요시에만 추가
  // 대부분의 비즈니스 로직은 컨트롤러의 lifecycle hooks에서 처리
}
```

### 컨트롤러 패턴:
```typescript
@Controller({ path: 'entities', version: '1' })
@Crud({
  entity: Entity,
  allowedFilters: ['field1', 'field2'],     // 필터링 허용 필드 (보안 필수)
  allowedParams: ['field1', 'field2'],      // 쿼리 파라미터 허용 필드 (보안 필수)
  allowedIncludes: ['relation1'],           // 관계 포함 허용 필드 (보안 필수)
  only: ['index', 'show', 'create', 'update', 'destroy'], // 허용 액션
})
export class EntityController {
  constructor(public readonly crudService: EntityService) {}
  
  // Lifecycle hooks로 비즈니스 로직 처리
  @BeforeCreate()
  async preprocessCreate(body: any) {
    // 생성 전 데이터 전처리
    return body;
  }
  
  @BeforeUpdate()
  async preprocessUpdate(body: any) {
    // 수정 전 데이터 전처리
    return body;
  }
}
```

### 자동 생성되는 API 엔드포인트:
| HTTP Method | Endpoint | 설명 | Method Name |
|-------------|----------|------|-------------|
| GET | `/entities` | 목록 조회 (페이지네이션) | `index` |
| GET | `/entities/:id` | 단일 조회 | `show` |
| POST | `/entities` | 생성 | `create` |
| PUT | `/entities/:id` | 수정 | `update` |
| DELETE | `/entities/:id` | 삭제 | `destroy` |
| POST | `/entities/upsert` | 생성/수정 | `upsert` |
| POST | `/entities/:id/recover` | 복구 | `recover` |

### 보안 설정 (필수):
```typescript
@Crud({
  entity: Entity,
  // 🔒 보안: 허용하지 않은 필드는 자동 차단
  allowedFilters: ['name', 'status', 'createdAt'],
  allowedParams: ['name', 'description', 'status'],
  allowedIncludes: ['user', 'tags'],
  
  // 특정 액션만 허용 (필요에 따라 제한)
  only: ['index', 'show', 'create', 'update'],
  
  // 라우트별 개별 설정 가능
  routes: {
    index: {
      allowedFilters: ['name', 'status', 'user.id'],
      allowedIncludes: ['user'],
    },
    show: {
      allowedIncludes: ['user', 'tags', 'comments'],
    },
  },
})
```

### 고급 쿼리 필터링 지원:
- `_eq`: 정확히 일치 (`name_eq=John`)
- `_ne`: 일치하지 않음 (`status_ne=inactive`)
- `_gt`, `_gte`: 초과, 이상 (`age_gt=18`)
- `_lt`, `_lte`: 미만, 이하 (`age_lt=65`)
- `_between`: 범위 (`age_between=18,65`)
- `_like`, `_ilike`: 패턴 검색 (`name_like=%John%`)
- `_in`, `_not_in`: 배열 포함/제외 (`id_in=1,2,3`)
- `_null`, `_not_null`: NULL 체크

### Lifecycle Hooks 활용:
```typescript
// 생성/수정 전 데이터 전처리
@BeforeCreate()
@BeforeUpdate()
async preprocessData(body: any, context: any) {
  // 패스워드 해싱
  if (body.password) {
    body.password = await bcrypt.hash(body.password, 10);
  }
  
  // 현재 사용자 ID 자동 설정
  if (context.request?.user?.id) {
    body.userId = context.request.user.id;
  }
  
  return body;
}

// 생성/수정 후 추가 로직
@AfterCreate()
@AfterUpdate()
async postProcess(entity: any, context: any) {
  // 캐시 무효화, 이벤트 발행 등
  this.eventEmitter.emit('entity.updated', { entity });
  return entity;
}

// 삭제 전 권한 확인
@BeforeDelete()
async validateDelete(id: number, context: any) {
  const userId = context.request?.user?.id;
  const entity = await this.crudService.findOne(id);
  
  if (entity.userId !== userId) {
    throw new ForbiddenException('삭제 권한이 없습니다.');
  }
  
  return true;
}
```

### RESTful Query 예시:
```bash
# 필터링 + 정렬 + 페이지네이션
GET /api/v1/users?filter[status_eq]=active&sort=-createdAt&page[number]=1&page[size]=10

# 관계 포함 + 중첩 필터링
GET /api/v1/posts?filter[author.name_like]=%John%&include=author,tags&sort=-publishedAt

# 복합 필터링
GET /api/v1/products?filter[price_between]=100,500&filter[category.name_in]=electronics,books
```

### 관리자 API 제외 규칙
- **금지**: 관리자 전용 라우트 개발 (예: `/admin/*`, 관리자 권한 체크 등)
- **금지**: AdminGuard 사용 (사용자용 API에서는 AuthGuard만 사용)
- **원칙**: 모든 개발하는 API는 일반 사용자 대상으로만 구현
- **참고**: 관리자 기능은 별도 개발 예정이므로 고려하지 않음

### 데이터 전처리:
- @BeforeCreate(), @BeforeUpdate() 데코레이터 활용
- 패스워드는 bcrypt.hash() 사용 (saltRounds: 10)
- 민감한 데이터 검증 및 변환

### 환경변수
- ENV_KEYS 상수 사용하여 환경변수 접근
- 필수 환경변수는 검증 함수 구현
- .env 파일 사용, 민감정보 git 제외

### Travel-Planet 구조
- **Travel**: Planet들의 상위 그룹, 여행 단위 관리
- **Planet**: 실제 채팅방 (단체 채팅 / 1:1 채팅)
- **권한**: Travel 소속 유저는 단체 Planet 접근, 1:1 Planet은 직접 초대만
- **만기 관리**: Travel 만료 시 모든 Planet 비활성화

### 채팅 메시지 타입 (모든 파일 500MB 통일)
- **텍스트 메시지**: 기본 텍스트 메시지 (최대 4000자)
- **이미지 메시지**: jpg, jpeg, png, gif, webp (최대 500MB)
- **비디오 메시지**: mp4, avi, mov, webm (최대 500MB)  
- **파일 메시지**: pdf, doc, docx, txt, zip, rar (최대 500MB)
- **시스템 메시지**: 시스템 알림 및 이벤트

### 대용량 파일 스토리지
- Cloudflare R2 스토리지 사용 (500MB 지원)
- 청크 업로드 방식 (5MB 단위)
- 썸네일 자동 생성 (이미지/비디오)
- CDN 및 스트리밍 최적화

### 에러 처리
- ERROR_MESSAGES 상수 사용
- 적절한 HTTP 상태 코드 반환
- 커스텀 예외 클래스 활용

### 로깅
- LoggingInterceptor 사용
- Logger 클래스명으로 컨텍스트 설정
- 적절한 로그 레벨 (log, error, warn, debug)

## 🧪 테스트 규칙
- Jest E2E 테스트 작성
- describeE2E 헬퍼 함수 사용
- @foryourdev/jest-swag로 OpenAPI 문서 생성
- 테스트 환경 분리

## 🔧 개발 도구
- 개발 환경에서만 스키마 API 활성화
- DevOnlyGuard로 개발 전용 엔드포인트 보호
- ESLint + Prettier 규칙 준수

## 📦 새 모듈 생성 시

### 기본 모듈 구조 생성:
```
src/modules/{module-name}/
├── {module-name}.entity.ts      # 엔티티 정의
├── {module-name}.service.ts     # 기본 CRUD 서비스
├── {module-name}.module.ts      # 모듈 설정
├── api/                         # API 컨트롤러
│   └── v1/
│       └── {module-name}.controller.ts
├── dto/                         # DTO 파일들 (필요시)
│   ├── create-{module-name}.dto.ts
│   └── update-{module-name}.dto.ts
├── constants/                   # 상수 파일들 (필요시)
│   └── {module-name}.constants.ts
├── types/                       # 타입 정의 (필요시)
│   └── {module-name}.types.ts
└── services/                    # 추가 서비스들 (복잡한 로직용)
    └── {specific-service}.service.ts
```

### 생성 순서:
1. 모듈 디렉토리 생성: `src/modules/{module-name}/`
2. 엔티티 파일 생성 (BaseEntity 상속)
3. 서비스 파일 생성 (CrudService 상속)
4. 컨트롤러 생성: `api/v1/{module-name}.controller.ts`
5. 모듈 파일 생성 (TypeOrmModule.forFeature 포함)
6. **중요**: 엔티티를 `src/config/database.config.ts`의 ENTITIES 배열에 추가
7. AppModule에 새 모듈 import
8. 마이그레이션 생성: `yarn migration:generate -- Create{ModuleName}Table`
9. 마이그레이션 실행: `yarn migration:run`

### 모듈 예시 (User 모듈):
- 경로: `src/modules/user/api/v1/user.controller.ts`
- 컨트롤러 데코레이터: `@Controller({ path: 'users', version: '1' })`
- API 엔드포인트: `/api/v1/users`

## ⚠️ 주의사항
- 프로덕션에서 DATABASE_SYNCHRONIZE=false 유지
- JWT_SECRET 32자 이상 필수
- SSL 설정 확인 (프로덕션 환경)
- 소셜 로그인은 선택적 설정

## 🚀 배포 관련
- Railway PostgreSQL 연동
- 마이그레이션 우선 실행 후 서버 시작
- 환경변수 검증 후 애플리케이션 시작

## 📝 코드 스타일
- 한국어 주석 및 에러 메시지 사용
- 데코레이터는 개별 라인에 작성
- 명확한 타입 정의 (any 지양)
- 함수형보다 클래스 기반 접근

## ⚠️ 공통 실수 방지
- **모듈 클래스명 일치**: `AdminModule` (❌ UserModule)
- **상대경로 필수**: `../../guards/auth.guard` (❌ `src/guards/auth.guard`)
- **엔티티 등록 필수**: ENTITIES 배열에 엔티티 등록
- **상수 사용**: `SECURITY_CONSTANTS.BCRYPT_SALT_ROUNDS` (❌ 하드코딩 10)
- **경로 일치**: 파일 위치와 @Controller path 동일
- **테스트 환경**: 절대경로 사용 시 Jest 테스트 실패

## 🔧 개발 워크플로
1. **새 기능 개발 시**: 엔티티 → 서비스 → 컨트롤러 → 모듈 → 마이그레이션 순서
2. **DB 변경 시**: 엔티티 수정 → 마이그레이션 생성 → 리뷰 → 실행
3. **API 변경 시**: 컨트롤러 수정 → 테스트 → 문서 업데이트

이 규칙을 따라 일관된 코드 품질과 프로젝트 구조를 유지하세요.
