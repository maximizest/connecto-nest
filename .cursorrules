# Connecto-nest 프로젝트 Cursor 규칙

## 🎯 프로젝트 개요
- NestJS 11.x 기반 백엔드 API 프로젝트
- TypeORM + PostgreSQL 데이터베이스
- JWT 인증 + 소셜 로그인 (Google, Apple, Kakao, Naver)
- @foryourdev/nestjs-crud 자동 CRUD 생성
- yarn 패키지 매니저 사용

## 📋 코딩 규칙

### 언어 및 프레임워크
- TypeScript 5.7.x 사용
- NestJS 데코레이터 패턴 준수
- class-validator, class-transformer 사용한 DTO 검증

### 패키지 매니저
- **MUST**: yarn 명령어만 사용 (npm 금지)
- 예: `yarn install`, `yarn dev`, `yarn migration:run`

### 파일 구조 및 네이밍
- 모듈식 구조: `src/modules/{module-name}/`
- 엔티티: `{name}.entity.ts` (모듈 루트)
- 서비스: `{name}.service.ts` (모듈 루트)
- 모듈: `{name}.module.ts` (모듈 루트)
- 컨트롤러: `api/v{version}/{name}.controller.ts` (API 버전별 관리)
- DTO: `dto/{name}.dto.ts` (dto 서브디렉토리)
- 상수: `constants/{name}.constants.ts` (constants 서브디렉토리)
- 타입: `types/{name}.types.ts` (types 서브디렉토리)
- 서비스: `services/{name}.service.ts` (복잡한 서비스는 services 서브디렉토리)
- 케밥 케이스 파일명 사용

### 데이터베이스 관련
- TypeORM 엔티티는 반드시 `src/config/database.config.ts`의 ENTITIES 배열에 등록
- 마이그레이션 생성: `yarn migration:generate -- {MigrationName}`
- 새 엔티티 생성 시 자동으로 마이그레이션 생성 제안
- BaseEntity 상속 권장

### 인증 및 보안
- JWT 기반 인증 사용
- AuthGuard, AdminGuard 적절히 적용
- 민감한 정보는 @Exclude() 데코레이터 사용 (refreshToken 등)
- 환경변수로 시크릿 관리
- SECURITY_CONSTANTS.BCRYPT_SALT_ROUNDS 사용 (기본값: 10)

### 컨트롤러 패턴:
```typescript
export class EntityController {
  constructor(public readonly crudService: EntityService) {}
  
  @BeforeCreate()
  @BeforeUpdate()
  async preprocessData(body: any) {
    // 데이터 전처리 로직
    return body;
  }
}
```

### API 설계
- @foryourdev/nestjs-crud 활용한 자동 CRUD
- crudResponse() 래퍼 함수 사용
- RESTful API 설계 원칙 준수
- API 버전 관리: `@Controller({ path: 'resource-name', version: '1' })`

### CRUD 컨트롤러 설정:
```typescript
@Crud({
  entity: EntityClass,
  allowedFilters: [],              // 필터링 허용 필드
  allowedParams: ['field1', 'field2'], // 쿼리 파라미터 허용 필드
  allowedIncludes: [],             // 관계 포함 허용 필드
  only: ['index', 'show', 'create', 'update', 'destroy'], // 허용 액션
})
```

### 데이터 전처리:
- @BeforeCreate(), @BeforeUpdate() 데코레이터 활용
- 패스워드는 bcrypt.hash() 사용 (saltRounds: 10)
- 민감한 데이터 검증 및 변환

### 환경변수
- ENV_KEYS 상수 사용하여 환경변수 접근
- 필수 환경변수는 검증 함수 구현
- .env 파일 사용, 민감정보 git 제외

### 에러 처리
- ERROR_MESSAGES 상수 사용
- 적절한 HTTP 상태 코드 반환
- 커스텀 예외 클래스 활용

### 로깅
- LoggingInterceptor 사용
- Logger 클래스명으로 컨텍스트 설정
- 적절한 로그 레벨 (log, error, warn, debug)

## 🧪 테스트 규칙
- Jest E2E 테스트 작성
- describeE2E 헬퍼 함수 사용
- @foryourdev/jest-swag로 OpenAPI 문서 생성
- 테스트 환경 분리

## 🔧 개발 도구
- 개발 환경에서만 스키마 API 활성화
- DevOnlyGuard로 개발 전용 엔드포인트 보호
- ESLint + Prettier 규칙 준수

## 📦 새 모듈 생성 시

### 기본 모듈 구조 생성:
```
src/modules/{module-name}/
├── {module-name}.entity.ts      # 엔티티 정의
├── {module-name}.service.ts     # 기본 CRUD 서비스
├── {module-name}.module.ts      # 모듈 설정
├── api/                         # API 컨트롤러
│   └── v1/
│       └── {module-name}.controller.ts
├── dto/                         # DTO 파일들 (필요시)
│   ├── create-{module-name}.dto.ts
│   └── update-{module-name}.dto.ts
├── constants/                   # 상수 파일들 (필요시)
│   └── {module-name}.constants.ts
├── types/                       # 타입 정의 (필요시)
│   └── {module-name}.types.ts
└── services/                    # 추가 서비스들 (복잡한 로직용)
    └── {specific-service}.service.ts
```

### 생성 순서:
1. 모듈 디렉토리 생성: `src/modules/{module-name}/`
2. 엔티티 파일 생성 (BaseEntity 상속)
3. 서비스 파일 생성 (CrudService 상속)
4. 컨트롤러 생성: `api/v1/{module-name}.controller.ts`
5. 모듈 파일 생성 (TypeOrmModule.forFeature 포함)
6. **중요**: 엔티티를 `src/config/database.config.ts`의 ENTITIES 배열에 추가
7. AppModule에 새 모듈 import
8. 마이그레이션 생성: `yarn migration:generate -- Create{ModuleName}Table`
9. 마이그레이션 실행: `yarn migration:run`

### 모듈 예시 (User 모듈):
- 경로: `src/modules/user/api/v1/user.controller.ts`
- 컨트롤러 데코레이터: `@Controller({ path: 'users', version: '1' })`
- API 엔드포인트: `/api/v1/users`

## ⚠️ 주의사항
- 프로덕션에서 DATABASE_SYNCHRONIZE=false 유지
- JWT_SECRET 32자 이상 필수
- SSL 설정 확인 (프로덕션 환경)
- 소셜 로그인은 선택적 설정

## 🚀 배포 관련
- Railway PostgreSQL 연동
- 마이그레이션 우선 실행 후 서버 시작
- 환경변수 검증 후 애플리케이션 시작

## 📝 코드 스타일
- 한국어 주석 및 에러 메시지 사용
- 데코레이터는 개별 라인에 작성
- 명확한 타입 정의 (any 지양)
- 함수형보다 클래스 기반 접근

## ⚠️ 공통 실수 방지
- 모듈 클래스명 일치: `AdminModule` (❌ UserModule)
- 엔티티 import 경로 정확성 확인
- ENTITIES 배열에 엔티티 등록 필수
- 패스워드 해싱 시 상수 사용: `SECURITY_CONSTANTS.BCRYPT_SALT_ROUNDS`
- 컨트롤러 경로 일치: 파일 위치와 @Controller path 동일

## 🔧 개발 워크플로
1. **새 기능 개발 시**: 엔티티 → 서비스 → 컨트롤러 → 모듈 → 마이그레이션 순서
2. **DB 변경 시**: 엔티티 수정 → 마이그레이션 생성 → 리뷰 → 실행
3. **API 변경 시**: 컨트롤러 수정 → 테스트 → 문서 업데이트

이 규칙을 따라 일관된 코드 품질과 프로젝트 구조를 유지하세요.
